# Copyright (c) 2023 by Marcin Nowicki
# frozen_string_literal: true

require_relative '../../app/models/device'

require 'rails_helper'
require 'rspec'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

::RSpec.describe('/devices') do
  let(:valid_attributes)   { attributes_for(:device)  }
  let(:invalid_attributes) { { ip: 'bogus' }          }
  let(:device)             { create(:device, :unique) }

  describe 'GET /index' do
    before { device }

    it 'renders a successful response' do
      get devices_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get device_url(device)
      expect(response).to(be_successful)
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_device_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      get edit_device_url(device)
      expect(response).to(be_successful)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Device' do
        expect { post(devices_url, params: { device: valid_attributes }) }
          .to(change(::Device, :count).by(1))
      end

      it 'redirects to the created device' do
        post devices_url, params: { device: valid_attributes }
        expect(response).to(redirect_to(device_url(::Device.last)))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Device' do
        expect { post(devices_url, params: { device: invalid_attributes }) }
          .not_to(change(::Device, :count))
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        # uses device_params
        post devices_url, params: { device: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe 'PATCH /update' do
    before { device }

    let(:new_attributes) { attributes_for(:device, :unique).except(:created_at, :updated_at) }

    context 'with valid parameters' do
      it 'updates the requested device' do
        expect { patch(device_url(device), params: { device: new_attributes }) }
          .to(change { device.reload.attributes.except('id', 'created_at', 'updated_at') }
          .to(new_attributes.stringify_keys))
      end

      it 'redirects to the device' do
        patch device_url(device), params: { device: new_attributes }
        device.reload
        expect(response).to(redirect_to(device_url(device)))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        # uses device_params
        patch device_url(device), params: { device: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe 'DELETE /destroy' do
    before { device }

    let(:url) { device_url(device) }

    it 'destroys the requested device' do
      expect { delete(url) }
        .to(change(::Device, :count).by(-1))
    end

    it 'redirects to the devices list' do
      delete url
      expect(response).to(redirect_to(devices_url))
    end

    it 'uses destroy!' do
      # uses set_device
      allow(::Device).to(receive(:find).with(device.id.to_s).and_return(device))
      allow(device).to(receive(:destroy!))
      delete url
      expect(device).to(have_received(:destroy!))
    end
  end
end
